# #########################################################################
# (c) 2011 David Anderson , All rights reserved; modifications, from whatever source, become IP of David Anderson
# #########################################################################
  require 'digest/sha1'

# #########################################################################
# DRY place for all authorization keycode preparation
# #########################################################################
module Refinery
 
class AuthKey

# #########################################################################

# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
  def self.secure_digest(*args)
    Digest::SHA1.hexdigest(args.flatten.join('--'))
  end

# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
  def self.make_token
    secure_digest(Time.now, (1..10).map{ rand.to_s })
  end
 
# ------------------------------------------------------------------------
# make_auth_key -- returns a SHA-encrypted randomized key from time & seed
# ------------------------------------------------------------------------
  def self.make_auth_key( seed='' )
    return Digest::SHA1.hexdigest( (Time.now.to_s + seed.to_s ).split(//).sort_by {rand}.join )
  end
  

# ------------------------------------------------------------------------
# ------------------------------------------------------------------------

# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
 
# #########################################################################
# #########################################################################
end   #  class AuthKey
end # mod Refinery
